package org.opentest4j;

import java.io.Serializable;

public final class ValueWrapper implements Serializable {
    private static final ValueWrapper nullValueWrapper = new ValueWrapper((Object) null);
    private static final long serialVersionUID = 1;
    private final transient Object ephemeralValue;
    private final int identityHashCode;
    private final String stringRepresentation;
    private final Class<?> type;
    private final Serializable value;

    private ValueWrapper(Object obj, String str) {
        Class<?> cls = null;
        this.value = obj instanceof Serializable ? (Serializable) obj : null;
        this.type = obj != null ? obj.getClass() : cls;
        this.stringRepresentation = str == null ? safeValueToString(obj) : str;
        this.identityHashCode = System.identityHashCode(obj);
        this.ephemeralValue = obj;
    }

    public static ValueWrapper create(Object obj) {
        if (obj instanceof ValueWrapper) {
            return (ValueWrapper) obj;
        }
        return obj == null ? nullValueWrapper : new ValueWrapper(obj);
    }

    private static String safeValueToString(Object obj) {
        try {
            return String.valueOf(obj);
        } catch (Exception e11) {
            return "<Exception in toString(): " + e11 + ">";
        }
    }

    public Object getEphemeralValue() {
        return this.ephemeralValue;
    }

    public int getIdentityHashCode() {
        return this.identityHashCode;
    }

    public String getStringRepresentation() {
        return this.stringRepresentation;
    }

    public Class<?> getType() {
        return this.type;
    }

    public Serializable getValue() {
        return this.value;
    }

    public String toString() {
        if (this.type == null) {
            return "null";
        }
        return this.stringRepresentation + " (" + this.type.getName() + "@" + Integer.toHexString(this.identityHashCode) + ")";
    }

    public static ValueWrapper create(Object obj, String str) {
        if (!(obj instanceof ValueWrapper)) {
            return obj == null ? nullValueWrapper : new ValueWrapper(obj, str);
        }
        ValueWrapper valueWrapper = (ValueWrapper) obj;
        return valueWrapper.stringRepresentation.equals(str) ? valueWrapper : create(valueWrapper.value, str);
    }

    private ValueWrapper(Object obj) {
        this(obj, safeValueToString(obj));
    }
}
