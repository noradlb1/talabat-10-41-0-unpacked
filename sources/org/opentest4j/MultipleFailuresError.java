package org.opentest4j;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class MultipleFailuresError extends AssertionError {
    private static final String EOL = System.getProperty("line.separator");
    private static final long serialVersionUID = 1;
    private final List<Throwable> failures;
    private final String heading;

    public MultipleFailuresError(String str, List<? extends Throwable> list) {
        String str2;
        if (list != null) {
            if (isBlank(str)) {
                str2 = "Multiple Failures";
            } else {
                str2 = str.trim();
            }
            this.heading = str2;
            this.failures = new ArrayList();
            for (Throwable th2 : list) {
                if (th2 != null) {
                    this.failures.add(th2);
                } else {
                    throw new NullPointerException("failures must not contain null elements");
                }
            }
            return;
        }
        throw new NullPointerException("failures must not be null");
    }

    private static boolean isBlank(String str) {
        return str == null || str.trim().length() == 0;
    }

    private static String nullSafeMessage(Throwable th2) {
        if (isBlank(th2.getMessage())) {
            return th2.getClass().getName() + ": <no message>";
        }
        return th2.getClass().getName() + ": " + th2.getMessage();
    }

    private static String pluralize(int i11, String str, String str2) {
        return i11 == 1 ? str : str2;
    }

    public List<Throwable> getFailures() {
        return Collections.unmodifiableList(this.failures);
    }

    public String getMessage() {
        int size = this.failures.size();
        if (size == 0) {
            return this.heading;
        }
        StringBuilder sb2 = new StringBuilder(this.heading);
        sb2.append(" (");
        sb2.append(size);
        sb2.append(" ");
        sb2.append(pluralize(size, "failure", "failures"));
        sb2.append(")");
        sb2.append(EOL);
        int i11 = size - 1;
        for (Throwable nullSafeMessage : this.failures.subList(0, i11)) {
            sb2.append("\t");
            sb2.append(nullSafeMessage(nullSafeMessage));
            sb2.append(EOL);
        }
        sb2.append(9);
        sb2.append(nullSafeMessage(this.failures.get(i11)));
        return sb2.toString();
    }

    public boolean hasFailures() {
        return !this.failures.isEmpty();
    }
}
